package spdvi;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;

/**
 *
 * @author Alejo
 */
public class MainFrame extends javax.swing.JFrame {

    private static final java.lang.reflect.Type LIST_OF_OPUS_TYPE = new TypeToken<List<Opus>>() {
    }.getType();
    private final String OPUS_FILE = "obres.json";
    private final String OPUS_DIR = System.getProperty("user.home") + "\\AppData\\Local\\OpusList\\data\\";
    private final String IMAGE_DIR = System.getProperty("user.home") + "\\AppData\\Local\\OpusList\\images\\";
    private ArrayList<Opus> obras;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initiation();
    }

    public ArrayList<Opus> getObras() {
        return obras;
    }

    public void setObras(ArrayList<Opus> obras) {
        this.obras = obras;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstOpusList = new javax.swing.JList<>();
        mnuMenu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mniCreate = new javax.swing.JMenuItem();
        mniRead = new javax.swing.JMenuItem();
        mniUpdate = new javax.swing.JMenuItem();
        mniDelete = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Opus List");

        lstOpusList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstOpusList);

        jMenu1.setText("File");

        mniCreate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        mniCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spdvi/icons/iloveimg-resized/plus-button.png"))); // NOI18N
        mniCreate.setText("Insert new opus");
        mniCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCreateActionPerformed(evt);
            }
        });
        jMenu1.add(mniCreate);

        mniRead.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        mniRead.setText("View opus");
        mniRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniReadActionPerformed(evt);
            }
        });
        jMenu1.add(mniRead);

        mniUpdate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        mniUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spdvi/icons/iloveimg-resized/edit.png"))); // NOI18N
        mniUpdate.setText("Update opus");
        mniUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUpdateActionPerformed(evt);
            }
        });
        jMenu1.add(mniUpdate);

        mniDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        mniDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spdvi/icons/iloveimg-resized/trash-bin.png"))); // NOI18N
        mniDelete.setText("Delete opus");
        mniDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeleteActionPerformed(evt);
            }
        });
        jMenu1.add(mniDelete);

        mnuMenu.add(jMenu1);

        jMenu2.setText("Edit");
        mnuMenu.add(jMenu2);

        setJMenuBar(mnuMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCreateActionPerformed
        create();
    }//GEN-LAST:event_mniCreateActionPerformed

    private void mniReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniReadActionPerformed
        read();
    }//GEN-LAST:event_mniReadActionPerformed

    private void mniUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUpdateActionPerformed
        update();
    }//GEN-LAST:event_mniUpdateActionPerformed

    private void mniDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDeleteActionPerformed
        delete();
    }//GEN-LAST:event_mniDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstOpusList;
    private javax.swing.JMenuItem mniCreate;
    private javax.swing.JMenuItem mniDelete;
    private javax.swing.JMenuItem mniRead;
    private javax.swing.JMenuItem mniUpdate;
    private javax.swing.JMenuBar mnuMenu;
    // End of variables declaration//GEN-END:variables

    private void initiation() {
        setLocationRelativeTo(null);
        checkDirectory();
        loadOpusFile();
    }
    
    private void create() {
        InsertDialog id = new InsertDialog(this, true);
        id.setVisible(true);
        loadOpusList();
    }

    private void read() {

    }

    private void update() {
        UpdateDialog ud = new UpdateDialog(this, true);
        ud.setVisible(true);
    }

    private void delete() {
        DeleteDialog dd = new DeleteDialog(this, true);
        dd.setVisible(true);
    }

    private void checkDirectory() {
        File opusDir = new File(OPUS_DIR);
        if (!opusDir.exists()) {
            opusDir.mkdirs();
        }
        
        File imageDir = new File(IMAGE_DIR);
        if (!imageDir.exists()) {
            imageDir.mkdirs();
        }

        File file = new File(OPUS_DIR + OPUS_FILE);
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void loadOpusFile() {
        Gson gson = new Gson();
        try {
            JsonReader reader = new JsonReader(new FileReader(OPUS_DIR + OPUS_FILE));
            obras = gson.fromJson(reader, LIST_OF_OPUS_TYPE);
            loadOpusList();
        } catch (FileNotFoundException fnfe) {
            fnfe.printStackTrace();
        }
    }

    private void loadOpusList() {
        DefaultListModel dlm = new DefaultListModel();
        if (obras != null) {
            for (Opus o : obras) {
                dlm.addElement(o.toString());
            }
        }
        lstOpusList.setModel(dlm);
    }
}
